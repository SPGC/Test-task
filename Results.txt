В данной программе я протестировал два подхода к считыванию и записи данных при помощи методов read и write классов FileInputStream и FileOutputStream соответственно.
Разница в подходах заключалась в следующем: в первом случае данные считывались и записывались побайтно, т.е. функции read и write вызывались для каждого байта,
во-втором случае данные считывались и записывались за один вызов функций read и write (если быть более точным, то их перегруженных версий).
Программу тестировал на двух компьютерах с разными типами накопителей: HDD и SSD. Результаты получились такими:
HDD:
	Вызов функций на каждый байт:
		Килобайт:
			Среднее время записи - 5 миллисекунд
			Среднее время чтения - 2 миллисекунды
		Мегабайт:
			Среднее время записи - 3511 миллисекунд
			Среднее время чтения - 2558 миллисекунды
		Гигабайт:
			Тестировать не стал, из-за чрезмерно долгого ожидания
	Вызов функций единожды:
		Килобайт:
			Среднее время записи - менее миллисекунды
			Среднее время чтения - менее миллисекунды
		Мегабайт:
			Среднее время записи - 5 миллисекунд
			Среднее время чтения - менее миллисекунды
		Гигабайт:
			Тестировать не стал, из-за чрезмерно долгого ожидания даже на SSD
SSD:
	Вызов функций на каждый байт:
		Килобайт:
			Среднее время записи - 4 миллисекунды
			Среднее время чтения - 1 миллисекунда
		Мегабайт:
			Среднее время записи - 1494 миллисекунды
			Среднее время чтения - 540 миллисекунд
		Гигабайт:
			Тестировать не стал, из-за чрезмерно долгого ожидания
	Вызов функций единожды:
		Килобайт:
			Среднее время записи - менее миллисекунды
			Среднее время чтения - менее миллисекунды
		Мегабайт:
			Среднее время записи - 2 миллисекунды
			Среднее время чтения - менее миллисекунды
		Гигабайт:
			Среднее время записи - 1411916 миллисекунд (примерно 23,5 минуты)
			Среднее время чтения - 519630 миллисекунд (примерно 8,5 минут)
Выводы:
	Во-первых, очевидный факт, SSD быстрее HDD, но это и так было понятно
	Во-вторых, менее очевидный, но ожидаемый факт: чтение быстрее записи. Если не ошибаюсь, это происходит из-за особенностей физического устройства накопителей, а не программных особенностей взаимодействия с ними. 
	В-третьих, совсем неочевидный факт, что множественный вызов функции read/write очень сильно замедляет работу программы, хотя и является более гибким 
		(например, при считывании больших данных, которые нет нужды хранить целиком, такой подход даёт огромный выигрыш по памяти). Из этого можно сделать вывод, что перегруженные методы read/write устроены более сложно,
		чем я предполагал, т.е. в них не используется многократный вызов read/write для чтения/записи одного байта